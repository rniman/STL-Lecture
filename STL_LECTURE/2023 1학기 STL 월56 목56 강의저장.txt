

==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 1:39:20
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 반복자(iterator) - 포인터를 추상화(=일반화) 한 것이 반복자다
// String을 표준 컨테이너로 -> 반복자를 제공해줘야 
//		begin(), end()
//		rbegin(), rend() -> 반드시 class로 구현해야만 한다
//		반복자 adapter:반복자처럼 행동하는 객체
//------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	String s{ "The quick brown fox jumps over the lazy dog" };

	sort(s.begin(), s.end());

	cout << s << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 1:40:00
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 반복자(iterator) - 포인터를 추상화(=일반화) 한 것이 반복자다
// String을 표준 컨테이너로 -> 반복자를 제공해줘야 
//		begin(), end()
//		rbegin(), rend() -> 반드시 class로 구현해야만 한다
//		반복자 adapter:반복자처럼 행동하는 객체
//------------------------------------------------------------
#include <iostream>
#include <string>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	// itr + n 과 itr - n의 경우 레퍼런스를 리턴하면 안된다.
	String s{ "The quick brown fox jumps over the lazy dog" };

	sort(s.begin(), s.end());

	cout << s << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 1:46:25
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	String s{ "The quick brown fox jumps over the lazy dog" };
	transform(s.begin(), s.end(), s.begin(), [](char c) {
		return toupper(c);
		});

	cout << s << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 2:10:40
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;


//-------
int main()
//-------
{
	String s{ "The quick brown fox jumps over 12345 the lazy dog" };
	
	// [문제] s중에 숫자가 있나 찾고 싶다.
	auto p = find_if(s.begin(), s.end(), [](char c) {
		return isdigit(c);
		});

	if (p == s.end())
	{
		cout << "숫자 없다" << endl;
	}
	else
	{
		cout << distance(s.begin(), p) + 1 << "번째 문자는 숫자" << endl;
	}


	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 2:36:07
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr, class Pred>
Itr my_find_if(Itr begin, Itr end, Pred pred)
{
	while (begin != end)
	{
		if (pred(*begin))
			return begin;
		else
			++begin;
	}
	return end;
}

//-------
int main()
//-------
{
	String s{ "The quick brown fox jumps over 12345 the lazy dog" };
	
	// [문제] s중에 숫자가 있나 찾고 싶다.
	auto p = my_find_if(s.begin(), s.end(), [](char c) {
		return isdigit(c);
		});


	if (p == s.end())
	{
		cout << "숫자 없다" << endl;
	}
	else
	{
		cout << distance(s.begin(), p) + 1 << "번째 문자는 숫자" << endl;
	}
	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 2:37:37
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;



//-------
int main()
//-------
{
	String s{ "0123456789" };
	
	copy(s.begin(), s.end(), ostream_iterator<char>{cout, " - "});


	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 2:39:35
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;



//-------
int main()
//-------
{
	String s{ "0123456789" };
	vector<char> v;
	v.reserve(s.size());

	copy(s.begin(), s.end(), v.begin());

	for (char c : v)
		cout << c << " - ";
	cout << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 2:41:03
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <array>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;



//-------
int main()
//-------
{
	String s{ "0123456789" };

	//vector<char> v;
	//v.reserve(s.size());

	array<char, 10> v;

	copy(s.begin(), s.end(), v.begin());

	for (char c : v)
		cout << c << " - ";
	cout << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 2:41:35
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <array>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;



//-------
int main()
//-------
{
	String s{ "0123456789" };

	vector<char> v(s.size());
	//v.reserve(s.size());

	//array<char, 10> v;

	copy(s.begin(), s.end(), v.begin());

	for (char c : v)
		cout << c << " - ";
	cout << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 2:49:31
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <array>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr, class Des_itr>
void my_copy(Itr begin, Itr end, Des_itr des)
{
	while (begin != end)
	{
		*des = *begin;
		++begin;
		++des;
	}
}

//-------
int main()
//-------
{
	String s{ "0123456789" };

	//vector<char> v;
	//v.reserve(s.size());

	array<char, 10> v;

	my_copy(s.begin(), s.end(), v.begin());

	for (char c : v)
		cout << c << " - ";
	cout << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 2:56:39
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <algorithm>
#include <array>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr, class Des_itr>
void my_copy(Itr begin, Itr end, Des_itr des)
{
	while (begin != end)
	{
		*des = *begin;
		++begin;
		++des;
	}
}

//-------
int main()
//-------
{
	String s{ "0123456789" };

	vector<char> v;
	//v.reserve(s.size());

	//inserter이용
	my_copy(s.begin(), s.end(), back_inserter(v));

	for (char c : v)
		cout << c << " - ";
	cout << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 3:12:37
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <set>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{

	// String을 길이 오름차순으로 정렬하는 컨테이너
	set<String> s{ "1", "333", "22", "55555", "4444" };

	for (const String& s : s)
		cout << s << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 3:13:22
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <set>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{

	// String을 길이 오름차순으로 정렬하는 컨테이너 
	// 연산자 < 이 정의되어야 한다
	set<String> s{ "3", "111", "22", "55555", "4444" };

	for (const String& s : s)
		cout << s << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 3:15:52
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	// "소스.cpp"를 s에 저장

	ifstream in{ "소스.cpp" };

	set<String> s{ istream_iterator<String>{in},{} };

	for (const String& s : s)
		cout << s << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 3:17:09
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	// "소스.cpp"를 s에 저장

	ifstream in{ "소스.cpp" };

	multiset<String> s{ istream_iterator<String>{in},{} };

	for (const String& s : s)
		cout << s << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-11 목요일 오후 3:17:53
==================================================
//------------------------------------------------------------
// 2023. 5. 11 목56								(11주 1일)
//------------------------------------------------------------
// 
//------------------------------------------------------------
#include <iostream>
#include <set>
#include <fstream>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	// "소스.cpp"를 s에 저장

	ifstream in{ "소스.cpp" };

	//set은 길이기준으로 정렬한다고 치면 길이마다 하나를 저장한다
	//set<String> s{ istream_iterator<String>{in},{} };
	multiset<String> s{ istream_iterator<String>{in},{} };

	for (const String& s : s)
		cout << s << endl;

	save("소스.cpp");
}
