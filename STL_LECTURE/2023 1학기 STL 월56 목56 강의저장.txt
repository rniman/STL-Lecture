

==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 1:47:03
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <random>
#include <format>
#include <numeric>
#include "save.h"

std::default_random_engine dre;

//-------
int main()
//-------
{
	// 랜덤 int 1000개를 화면에 생성하여 화면에 출력하라

	std::uniform_int_distribution<int> uid{ 0, 10'000 };

	// [문제] 1000개 중에서 가장 큰 수를 출력하라.

	int maxValue = std::numeric_limits<int>::min();

	for (int i{}; i < 1000; ++i)
	{
		int rand_num = uid(dre);
		std::cout << std::format("{:10}", rand_num);
		if (maxValue < rand_num)
			maxValue = rand_num;
	}

	std::cout << '\n' << "maxValue = " << maxValue << '\n';

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 1:51:52
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <random>
#include <fstream>
#include "save.h"

std::default_random_engine dre;

//-------
int main()
//-------
{
	// 랜덤 int 1000개를 화면에 생성하여 화면에 출력하라

	std::uniform_int_distribution<int> uid{ 0, 10'000 };

	// [문제] 랜덤 int 1000개를 파일에 저장한다.
	std::ofstream out{ "random_int_num_1000.txt" };

	for (int i = 0; i < 1000; ++i)
		out << uid(dre) << " ";

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 2:07:21
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <format>
#include <fstream>
#include "save.h"

// [문제] 파일 "random_int_num_1000.txt"에는 int값 1000개가 저장되어 있다.
// int는 값이 text로 저장 되어있으며 값과 값사이에는 공백이 있다.
// 파일을 읽어 int값 1000개를 화면에 출력하라

//-------
int main()
//-------
{
	std::ifstream in("random_int_num_1000.txt");	// RAII

	if (!in)
	{
		std::cout << "파일 열기 실패!\n";
		return 0;
	}

	int n;
	for (int i=0;i<1000;++i)
	{
		in >> n;
		std::cout << std::format("{:10}", n);
	}

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 2:11:24
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <format>
#include <fstream>
#include "save.h"

// [문제] 파일 "random_int_num_1000.txt"에는 몇 개인지 모르는 int값이 저장되어 있다.
// int는 값이 text로 저장 되어있으며 값과 값사이에는 공백이 있다.
// 파일을 읽어 int값 1000개를 화면에 출력하라

//-------
int main()
//-------
{
	std::ifstream in("random_int_num_1000.txt");	// RAII

	if (!in)
	{
		std::cout << "파일 열기 실패!\n";
		return 0;
	}

	int n;
	int cnt{};
	while (in >> n)
	{
		std::cout << std::format("{:10}", n);
		++cnt;
	}
	std::cout << "\n모두 " << cnt << "개 int를 읽었다.\n";



	save("소스.cpp");
}



==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 2:16:02
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <format>
#include <fstream>
#include "save.h"

// [문제] 파일 "random_int_num_1000.txt"에는 몇 개인지 모르는 int값이 저장되어 있다.
// int는 값이 text로 저장 되어있으며 값과 값사이에는 공백이 있다.
// 파일을 읽어 int값 1000개를 화면에 출력하라

//-------
int main()
//-------
{
	std::ifstream in("random_int_num_1000.txt");	// RAII


	// coding convention
	if (!in) {
		std::cout << "파일 열기 실패!\n";
		return 0;
	}

	int n;
	int cnt{};
	while (in >> n) {
		std::cout << std::format("{:10}", n);
		++cnt;
	}
	std::cout << "\n모두 " << cnt << "개 int를 읽었다.\n";



	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 2:19:18
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <format>
#include <fstream>
#include "save.h"

// [문제] 파일 "random_int_num_1000.txt"에는 int 1000개가 저장되어 있다.
// int는 값이 text로 저장 되어있으며 값과 값사이에는 공백이 있다.
// 파일을 읽어 int값 1000개를 메모리에 저장하라

//-------
int main()
//-------
{
	std::ifstream in("random_int_num_1000.txt");	// RAII

	// coding convention
	if (!in) {	//반드시 있어야 한다.
		std::cout << "파일 열기 실패!\n";
		return 0;
	}

	int numbers[1000];
	for (int i = 0; i < 1000; ++i) {
		in >> numbers[i];
	}

	save("소스.cpp");
}



==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 2:38:30
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <format>
#include <fstream>
#include <numeric>
#include "save.h"

// [문제] 파일 "random_int_num_1000.txt"에는 int 1000개가 저장되어 있다.
// int는 값이 text로 저장 되어있으며 값과 값사이에는 공백이 있다.
// 파일을 읽어 int값 1000개를 메모리에 저장하라

//-------
int main()
//-------
{
	std::ifstream in("random_int_num_1000.txt");	// RAII

	// coding convention
	if (!in) {	//반드시 있어야 한다.
		std::cout << "파일 열기 실패!\n";
		return 0;
	}

	int numbers[1000];	// contiguous memory
	for (int i{}; i < 1000; ++i) {
		in >> numbers[i];
	}

	//가장 큰 값을 찾아 화면에 출력하라.
	int maxValue = std::numeric_limits<int>::min();
	for (int i{}; i < 1000; ++i)
		if (maxValue < numbers[i])
			maxValue = numbers[i];
	std::cout << "\n maxValue = " << maxValue << '\n';
	

	save("소스.cpp");
}



==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 2:50:07
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <fstream>
#include <algorithm>

#include "save.h"

// [문제] 파일 "random_int_num_1000.txt"에는 int 1000개가 저장되어 있다.
// int는 값이 text로 저장 되어있으며 값과 값사이에는 공백이 있다.
// 파일을 읽어 int값 1000개를 메모리에 저장하라

//-------
int main()
//-------
{
	std::ifstream in("random_int_num_1000.txt");	// RAII

	// coding convention
	if (!in) {	//반드시 있어야 한다.
		std::cout << "파일 열기 실패!\n";
		return 0;
	}

	int numbers[1000];	// contiguous memory
	for (int i{}; i < 1000; ++i) {
		in >> numbers[i];
	}

	//가장 큰 값을 찾아 화면에 출력하라.
	
	auto maxValue = std::max_element(std::begin(numbers), std::end(numbers));

	std::cout << "\nmaxValue = " << *maxValue << '\n';
	
	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 2:52:23
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include "save.h"

// [문제] 파일 "random_int_num_1000.txt"에는 int 1000개가 저장되어 있다.
// int는 값이 text로 저장 되어있으며 값과 값사이에는 공백이 있다.
// 파일을 읽어 int값 1000개를 메모리에 저장하라

//-------
int main()
//-------
{
	std::ifstream in("random_int_num_1000.txt");	// RAII

	// coding convention
	if (!in) {	//반드시 있어야 한다.
		std::cout << "파일 열기 실패!\n";
		return 0;
	}

	std::array<int, 1000> numbers;
	for (int i{}; i < 1000; ++i) {
		in >> numbers[i];
	}

	//가장 큰 값을 찾아 화면에 출력하라.
	
	auto maxValue = std::max_element(std::begin(numbers), std::end(numbers));

	std::cout << "\nmaxValue = " << *maxValue << '\n';
	
	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 2:53:00
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include "save.h"

// [문제] 파일 "random_int_num_1000.txt"에는 int 1000개가 저장되어 있다.
// int는 값이 text로 저장 되어있으며 값과 값사이에는 공백이 있다.
// 파일을 읽어 int값 1000개를 메모리에 저장하라

//-------
int main()
//-------
{
	std::ifstream in("random_int_num_1000.txt");	// RAII

	// coding convention
	if (!in) {	//반드시 있어야 한다.
		std::cout << "파일 열기 실패!\n";
		return 0;
	}

	std::array<int, 1000> numbers;
	for (int i{}; i < 1000; ++i) {
		in >> numbers[i];
	}

	//가장 큰 값을 찾아 화면에 출력하라.
	
	auto maxValue = std::max_element(numbers.begin(), numbers.end());

	std::cout << "\nmaxValue = " << *maxValue << '\n';
	
	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 2:55:38
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <fstream>
#include <algorithm>
#include <array>
#include "save.h"

// [문제] 파일 "random_int_num_1000.txt"에는 int 1000개가 저장되어 있다.
// int는 값이 text로 저장 되어있으며 값과 값사이에는 공백이 있다.
// 파일을 읽어 int값 1000개를 메모리에 저장하라

//-------
int main()
//-------
{
	std::ifstream in("random_int_num_1000.txt");	// RAII

	// coding convention
	if (!in) {	//반드시 있어야 한다.
		std::cout << "파일 열기 실패!\n";
		return 0;
	}

	std::array<int, 1000> numbers;
	for (int i{}; i < 1000; ++i) {
		in >> numbers[i];
	}

	//가장 큰 값을 찾아 화면에 출력하라.
	
	auto maxValue = std::max_element(numbers.begin(), numbers.end());

	std::cout << "\nmaxValue = " << *maxValue << '\n';
	
	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 2:56:58
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <array>
#include "save.h"


//-------
int main()
//-------
{
	std::array<int, 1000> numbers;
	std::cout << sizeof numbers;

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 3:01:57
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <array>
#include "save.h"

//int a[10]; //파일 크기가 늘지않음
//int a[10]{ 1 };

//-------
int main()
//-------
{
	std::array<int, 10> a;
	int x{ 123 };
	std::cout << "스택에 있는 x - " << std::addressof(x) << '\n';
	std::cout << "스택에 있는 a[0] - " << std::addressof(a[0]) << '\n';

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 3:02:30
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <array>
#include "save.h"

//int a[10]; //파일 크기가 늘지않음
//int a[10]{ 1 };

//-------
int main()
//-------
{
	std::array<int, 10> a;
	int x{ 123 };
	std::cout << "스택에 있는 x - " << std::addressof(x) << '\n';
	std::cout << "스택에 있는 a[0] - " << std::addressof(a[9]) << '\n';

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 3:04:13
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <array>
#include "save.h"

//int a[10]; //파일 크기가 늘지않음
//int a[10]{ 1 };

std::array<int, 10> ga;
int gx{ 456 };

//-------
int main()
//-------
{
	std::array<int, 10> a;
	int x{ 123 };
	std::cout << "스택에 있는 x -     " << std::addressof(x) << '\n';
	std::cout << "스택에 있는 a[0] -  " << std::addressof(a[0]) << '\n';
	std::cout << std::endl;
	std::cout << "DATA에 있는 gx -    " << std::addressof(gx) << '\n';
	std::cout << "DATA에 있는 ga[0] - " << std::addressof(ga[0]) << '\n';

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 3:06:06
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <array>
#include "save.h"

//int a[10]; //파일 크기가 늘지않음
//int a[10]{ 1 };

std::array<int, 10> ga;
int gx{ 456 };

//-------
int main()
//-------
{
	std::array<int, 10> a;
	int x{ 123 };
	std::cout << "스택에 있는 x -     " << std::addressof(x) << '\n';
	std::cout << "스택에 있는 a[0] -  " << std::addressof(a[0]) << '\n';
	std::cout << std::endl;
	std::cout << "DATA에 있는 gx -    " << std::addressof(gx) << '\n';
	std::cout << "DATA에 있는 ga[0] - " << std::addressof(ga[0]) << '\n' << '\n';

	std::cout << "CODE에 있는 main 0  " << std::addressof(main) << '\n';

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-09 목요일 오후 3:06:21
==================================================
//------------------------------------------------------------
// 2023. 3. 9 목56						(2주 1일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <array>
#include "save.h"

//int a[10]; //파일 크기가 늘지않음
//int a[10]{ 1 };

std::array<int, 10> ga;
int gx{ 456 };

//-------
int main()
//-------
{
	std::array<int, 10> a;
	int x{ 123 };
	std::cout << "스택에 있는 x -     " << std::addressof(x) << '\n';
	std::cout << "스택에 있는 a[0] -  " << std::addressof(a[0]) << '\n';
	std::cout << std::endl;
	std::cout << "DATA에 있는 gx -    " << std::addressof(gx) << '\n';
	std::cout << "DATA에 있는 ga[0] - " << std::addressof(ga[0]) << '\n' << '\n';

	std::cout << "CODE에 있는 main -  " << std::addressof(main) << '\n';
	std::cout << "CODE에 있는 save -  " << std::addressof(save) << '\n';

	save("소스.cpp");
}