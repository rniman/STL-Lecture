

==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 1:34:38
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56					(1주 2일)
//------------------------------------------------------------
// 한학기 강의를 저장할 수 있는 코딩을 한다.
// save() 함수를 save.h와 save.cpp
//------------------------------------------------------------
// VS 설정: Release / x64, Project 설정: C++언어 latest, C++ SDL 검사X
//------------------------------------------------------------
 

#include <iostream>
#include "save.h"

//void save(const char*); c 스타일
//-------
int main()
//-------
{
	std::cout << "2023 STL" << '\n';

	save("소스.cpp");
}



==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 1:47:38
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// 한학기 강의를 저장할 수 있는 코딩을 한다.
// save() 함수를 save.h와 save.cpp
//------------------------------------------------------------
// VS 설정: Release / x64, Project 설정: C++언어 latest, C++ SDL 검사X
//------------------------------------------------------------
 
#include <iostream>
#include "save.h"

//void save(const char*); c 스타일
//-------
int main()
//-------
{
	std::cout << "2023 STL" << '\n';

	save("소스.cpp");
}



==================================================
save.h , 저장시간: 2023-03-06 월요일 오후 1:48:31
==================================================
//------------------------------------------------------------
// save.h 한학기 강의를 저장하는 함수
//------------------------------------------------------------
#pragma once

#include <string>
//#ifndef MY_SAVE
//#define MY_SAVE

void save(const std::string&);


//#endif

==================================================
save.cpp , 저장시간: 2023-03-06 월요일 오후 1:48:31
==================================================
//------------------------------------------------------------
// save.cpp 한학기 강의를 저장하는 함수
//------------------------------------------------------------

#include <fstream>
#include <vector>
#include <chrono>
#include "save.h"

void save(const std::string& fileName)
{
	// fileName을 읽기 모드로 연다
	std::ifstream in{ fileName };

	//char c;
	//in >> c; in객체에 연산자 오버로딩이 구현되어있음
	/*while (in >> c)
		std::cout << c;*/

		// 저장할 파일을 덧붙여 쓰기 모드로 연다
	std::ofstream out{ "2023 1학기 STL 월56 목56 강의저장.txt", std::ios::app }; //덧붙여 쓰기모드

	// 저장한 시간을 파일에 기록한다.
	// epoch: 시간의 기원
	auto now = std::chrono::system_clock::now();			// time_point를 얻는다
	//std::cout << now << '\n'; -> 표준 시간 출력
	auto time = std::chrono::system_clock::to_time_t(now);	// UTC 시간으로 변환	
	//std::cout << time << '\n'; ->  틱수를 출력
	auto lt = localtime(&time);								// 현지 시간으로 변환

	auto old = out.imbue(std::locale("ko_KR"));				// 한국으로 변경

	// 시간 출력
	out << '\n' << '\n';
	out << "==================================================" << '\n';
	out << fileName << " " << std::put_time(lt, ", 저장시간: %x %A %X") << '\n';
	out.imbue(std::locale(old));							// 원래 형식으로 되돌린다.
	out << "==================================================" << '\n';

	// fileName을 읽어 저장 파일에 덧붙여 쓴다. (STL 자료구조와 알고리즘)
	//std::vector<char> v{ std::istream_iterator<char>{in} , {} }; -> white space를 무시함
	std::vector<char> v{ std::istreambuf_iterator <char>{in} , {} };
	std::copy(v.begin(), v.end(), std::ostream_iterator<char>{out});

}


==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 1:48:31
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// 한학기 강의를 저장할 수 있는 코딩을 한다.
// save() 함수를 save.h와 save.cpp
//------------------------------------------------------------
// VS 설정: Release / x64, Project 설정: C++언어 latest, C++ SDL 검사X
//------------------------------------------------------------
 
#include <iostream>
#include "save.h"

//void save(const char*); c 스타일
//-------
int main()
//-------
{
	std::cout << "2023 STL 강의 시작 합니다." << '\n';

	save("save.h");
	save("save.cpp");
	save("소스.cpp");
}




==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 2:01:13
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// C++ 복습
//------------------------------------------------------------
 
#include <iostream>
#include "save.h"

void change(int&, int&); //function declaration

//void save(const char*); c 스타일
//-------
int main()
//-------
{
	//[문제] main()이 의도한대로 실행 되게 필요한 코딩을 하라
	//main()이 수정되면 안됨
	int a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl;
	
	save("소스.cpp");
}

void change(int& _a, int& _b) //function definition
{
	int temp{ _a };
	_a = _b;
	_b = temp;
}




==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 2:22:07
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// C++ 복습
//------------------------------------------------------------
 
#include <iostream>
#include "save.h"

class Dog
{
private:
	int x;
public:
	Dog(const int& _x)
		:x(_x)
	{}
	
	friend std::ostream& operator<<(std::ostream& out, const Dog& dog)
	{
		out << dog.x;
		return out;
	}
};

void change(Dog&, Dog&); //function declaration

//void save(const char*); c 스타일
//-------
int main()
//-------
{
	//[문제] main()이 의도한대로 실행 되게 필요한 코딩을 하라
	//main()이 수정되면 안됨
	Dog a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl; // 2 ,1
	
	save("소스.cpp");
}

void change(Dog& _a, Dog& _b) //function definition
{
	Dog temp{ _a };
	_a = _b;
	_b = temp;
}




==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 2:37:11
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// C++ 복습
//------------------------------------------------------------
 
#include <iostream>
#include "save.h"

class Dog
{
private:
	int x;
public:
	Dog(const int& _x)
		:x(_x)
	{}
	
	friend std::ostream& operator<<(std::ostream&, const Dog&);
};

std::ostream& operator<<(std::ostream& out, const Dog& dog)
{
	return out << dog.x;
}

void change(int&, int&);
void change(Dog&, Dog&); //function declaration

//void save(const char*); c 스타일
//-------
int main()
//-------
{
	//[문제] main()이 의도한대로 실행 되게 필요한 코딩을 하라
	//main()이 수정되면 안됨
	Dog a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl; // 2 ,1
	
	save("소스.cpp");
}

void change(int& _a, int& _b) //function definition
{
	int temp{ _a };
	_a = _b;
	_b = temp;
}


void change(Dog& _a, Dog& _b) //function definition
{
	//생성자 소멸자 복사생성자 복사할당연산자 이동연산자 이동복사연산자
	Dog temp{ _a };
	_a = _b; //_a.operator=(_b);
	_b = temp;
}




==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 2:37:51
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// C++ 복습
//------------------------------------------------------------
 
#include <iostream>
#include "save.h"

class Dog
{
private:
	int x;
public:
	Dog(const int& _x)
		:x(_x)
	{}
	
	friend std::ostream& operator<<(std::ostream&, const Dog&);
};

std::ostream& operator<<(std::ostream& out, const Dog& dog)
{
	return out << dog.x;
}

void change(int&, int&);
void change(Dog&, Dog&); //function declaration

//void save(const char*); c 스타일
//-------
int main()
//-------
{
	//[문제] main()이 의도한대로 실행 되게 필요한 코딩을 하라
	//main()이 수정되면 안됨
	Dog a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl; // 2 ,1
	
	save("소스.cpp");

	return -12345;
}

void change(int& _a, int& _b) //function definition
{
	int temp{ _a };
	_a = _b;
	_b = temp;
}


void change(Dog& _a, Dog& _b) //function definition
{
	//생성자 소멸자 복사생성자 복사할당연산자 이동연산자 이동복사연산자
	Dog temp{ _a };
	_a = _b; //_a.operator=(_b);
	_b = temp;
}




==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 2:44:39
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// C++ 복습
//------------------------------------------------------------
 
#include <iostream>
#include "save.h"

class Dog
{
private:
	int x;
public:
	Dog(const int& _x)
		:x(_x)
	{}
	
	friend std::ostream& operator<<(std::ostream&, const Dog&);
};

std::ostream& operator<<(std::ostream& out, const Dog& dog)
{
	return out << dog.x;
}

template<class T>
void change(T&, T&);

//-------
int main()
//-------
{
	//[문제] main()이 의도한대로 실행 되게 필요한 코딩을 하라
	//main()이 수정되면 안됨
	Dog a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl; // 2 ,1
	
	save("소스.cpp");

}

template<class T>
void change(T& _a, T& _b) //function definition
{
	T temp{ _a };
	_a = _b;
	_b = temp;
}





==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 3:04:38
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// C++ 복습
//------------------------------------------------------------
 
#include <iostream>
#include "save.h"

class Dog
{
private:
	int x;
public:
	Dog(const int& _x)
		:x(_x)
	{}
	
	friend std::ostream& operator<<(std::ostream&, const Dog&);
};

std::ostream& operator<<(std::ostream& out, const Dog& dog)
{
	return out << dog.x;
}

//템플릿은 선언과 정의를 동시에
template<class T>
void change(T& _a, T& _b) //function definition
{
	T temp{ _a };
	_a = _b;
	_b = temp;
}

//-------
int main()
//-------
{
	//[문제] main()이 의도한대로 실행 되게 필요한 코딩을 하라
	//main()이 수정되면 안됨
	Dog a{ 1 }, b{ 2 };

	change(a, b);

	std::cout << a << ", " << b << std::endl; // 2 ,1
	
	save("소스.cpp");

}



==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 3:07:08
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <random>
#include "save.h"

std::default_random_engine dre;

//-------
int main()
//-------
{
	// 랜덤 int 1000개를 화면에 생성하여 화면에 출력하라

	std::cout << sizeof(dre) << '\n';

	save("소스.cpp");
}



==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 3:13:42
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <random>
#include "save.h"

std::default_random_engine dre;

//-------
int main()
//-------
{
	// 랜덤 int 1000개를 화면에 생성하여 화면에 출력하라

	std::uniform_int_distribution<int> uid;

	for (int i{}; i < 1000; ++i)
		std::cout << uid(dre) << ' ';

	std::cout << '\n';

	save("소스.cpp");
}



==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 3:15:52
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <random>
#include <format>
#include "save.h"

std::default_random_engine dre;

//-------
int main()
//-------
{
	// 랜덤 int 1000개를 화면에 생성하여 화면에 출력하라

	std::uniform_int_distribution<int> uid;

	for (int i{}; i < 1000; ++i)
		std::cout << std::format("{:20}", uid(dre));

	std::cout << '\n';

	save("소스.cpp");
}



==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 3:16:44
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <random>
#include <format>
#include "save.h"

std::default_random_engine dre;

//-------
int main()
//-------
{
	// 랜덤 int 1000개를 화면에 생성하여 화면에 출력하라

	std::uniform_int_distribution<int> uid;

	for (int i{}; i < 1000; ++i)
		std::cout << std::format("{:^80}", uid(dre));

	std::cout << '\n';

	save("소스.cpp");
}



==================================================
소스.cpp , 저장시간: 2023-03-06 월요일 오후 3:18:52
==================================================
//------------------------------------------------------------
// 2023. 3. 6 월56						(1주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
//------------------------------------------------------------
 
#include <iostream>
#include <random>
#include <format>
#include "save.h"

std::default_random_engine dre;

//-------
int main()
//-------
{
	// 랜덤 int 1000개를 화면에 생성하여 화면에 출력하라

	std::uniform_int_distribution<int> uid{ 0, 99999'9999 };

	for (int i{}; i < 1000; ++i)
		std::cout << std::format("{:10}", uid(dre));

	std::cout << '\n';

	save("소스.cpp");
}

