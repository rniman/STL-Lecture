C++ programming paradigm

1. procedual Program Language (절차 지향)
2. Object Oriented PL (객체 지향) -> 특정자료형 집중: 특성 + 행동  --> 캡슐화, 자료추상화, 데이터 은닉
3. Generic PL -> 자료형에 무관한 코딩 *template* -> 템플릿 함수(알고리즘)와 템플릿 클래스(자료구조)를 만든다.
///////
4. Template Meta PL
5. functional PL


int [1000];
continuous -> 시간상 연속성

contiguous -> 공간상 연속성 (가장 빠른 자료구조)
array, string, vector


RAII : Resource Acquisition Is Initialization


binary-mode
비트그대로 파일작성


왜 정확히 4000바이트가 아닐까?

컴퓨터가 메모리를 읽다가 2바이트로 바꿔버림
enter키에 해당하는 것을 -> CR + LF로 바꿔버림
글자를 기록하게 시켰기 때문에


file 열기모드

1.default = text
2.binary

file 읽고쓰는 방법

1.고수준 <<, >>
2.저수준 write,read

1 - 1, 1 - 2, 2 - 1, 2 - 2		--총 4가지


메모리 padding


스택은 주로 재귀시 죽음

실행파일 -> 실행: 메모리에 올린다 
스택, 코드를 제외한 나머지 공간:Free Store Data

전역
1.9GB를 사용
초기화 하지 않으면 실행 시에 0으로 초기화시킨다. (이를 초기화 하지않은 1.9GB가 있다는 명령이 파일에 들어있다.)
array<~> a{1};을 사용해두면 1,0,0,0,...으로 초기화 시킨다.
-> 이것을 실행파일에 그대로 적어둔다. (초기화를 설명할 방법이 없기 떄문에 그대로 다 적어놔야한다.) -> 실행파일이 커진다.(컴파일시간 증가)

DATA SEGMENT
1.초기화 X
2.초기화 되는 영역

전역변수:default random engine


자료를 STACK
자료의 크기가 작다.

free Store
실행타임(execution-time)에 

DATA
실행파일 크기가 커질수 있다. BSS


std::array<int, 1'000'000> numbers;
qsort(뭘(numbers주소) , 몇개(100만개), 한개 크기는(4바이트), 정렬방법은?(callable type) -> (기능) );

qsort가 callable type에게 가져온 데이터를 해결할 방법을 물어본다.


std::sort(numbers.begin(), numbers.end(), Dog());
sort( 시작위치, 마지막에서 하나 지난위치, 이름이없는 객체 생성(1바이트)해 전달)
sort는 임의의 값 a,b 2개를 가져와 Dog()(a, b)를 전달


Callable Types
1.function pointer
2.function object
3.lambda

1,2,3을 통합하기 위해 function으로 대통합(템플릿 클래스) - generalization

1,2,3 - specialization


span, range - generalization의 대표