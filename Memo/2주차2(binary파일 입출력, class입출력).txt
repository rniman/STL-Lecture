==================================================
소스.cpp , 저장시간: 2023-03-13 월요일 오후 1:40:07
==================================================
//------------------------------------------------------------
// 2023. 3. 13 월56						(2주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
// 파일에 int를 메모리 크기 그대로 읽고 쓰기
//------------------------------------------------------------
 
#include <iostream>
#include <array>
#include "save.h"

std::array<int, 1000> a; //int{} - 자료형 int의 디폴트 초기값으로 초기화 시킨다.
//-------
int main()
//-------
{
	//	std::array<int, 1000> a; // 쓰레기값
	//	std::array<int, 1000> a{}; // 0으로 초기화

	std::cout << "array<int, 100>가 차지하는 메모리 크기 - " << sizeof a << '\n';

	for (int& n : a)
	{
		std::cout << n << '\t';
	}

	save("소스.cpp");
}
==================================================
소스.cpp , 저장시간: 2023-03-13 월요일 오후 1:56:53
==================================================
//------------------------------------------------------------
// 2023. 3. 13 월56						(2주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
// 파일에 int를 메모리 크기 그대로 읽고 쓰기 - binary mode FILE I/O
//------------------------------------------------------------
 
#include <iostream>
#include <fstream>
#include <array>
#include "save.h"

//-------
int main()
//-------
{
	std::array<int, 1000> a;

	std::cout << "array<int, 100>가 차지하는 메모리 크기 - " << sizeof a << '\n';

	std::ofstream out{ "스택에 있는 int 천개" };

	for (int n : a)
	{
		//out << n << '\t';// << 고수준 입출력 
		//-> 저수준 입출력 - 메모리 그대로 파일에 기록
		out.write(reinterpret_cast<char*>(&n), sizeof(int));
	}
	//out.write(reinterpret_cast<char*>(&a), sizeof(int) * 1'000); //이것이 더 효율적

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-13 월요일 오후 2:06:14
==================================================
//------------------------------------------------------------
// 2023. 3. 13 월56						(2주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
// 파일에 int를 메모리 크기 그대로 읽고 쓰기 - binary mode FILE I/O
//------------------------------------------------------------
 
#include <iostream>
#include <fstream>
#include <array>
#include "save.h"

//-------
int main()
//-------
{
	std::array<int, 1000> a;

	std::cout << "array<int, 100>가 차지하는 메모리 크기 - " << sizeof a << '\n';

	//std::ofstream out{ "스택에 있는 int 천개" };			//default(text)모드로 작성
	std::ofstream out{ "스택에 있는 int 천개", std::ios::binary }; 	//binary모드로 작성

	out.write(reinterpret_cast<char*>(&a), sizeof(int) * 1'000);

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-13 월요일 오후 2:10:53
==================================================
//------------------------------------------------------------
// 2023. 3. 13 월56						(2주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
// 파일에 int를 메모리 크기 그대로 읽고 쓰기 - binary mode FILE I/O
//------------------------------------------------------------
 
#include <iostream>
#include <fstream>
#include <numeric>
#include <array>
#include "save.h"

//-------
int main()
//-------
{
	std::array<int, 1000> a;
	std::iota(a.begin(), a.end(), 1);

	std::ofstream out{ "int 천개", std::ios::binary };

	out.write((const char*)&a, sizeof(int) * 1'000);


	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-13 월요일 오후 2:37:21
==================================================
//------------------------------------------------------------
// 2023. 3. 13 월56						(2주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 int
// 파일에 int를 메모리 크기 그대로 읽고 쓰기 - binary mode FILE I/O
//------------------------------------------------------------
 
#include <iostream>
#include <fstream>
#include <numeric>
#include <format>
#include <array>
#include "save.h"

// [문제] 파일 "int 천개"에 int값 1000개가 binary mode로 기록되어 있다.
// 메모리로 다 읽어 온 후 화면에 값을 출력하라.
// (읽기는 read함수로 가능)

//-------
int main()
//-------
{
	std::ifstream in{ "int 천개", std::ios::binary };

	std::array<int, 1000> a;
	
	in.read((char*)&a, sizeof(int) * 1000);

	for (const int& n : a)
	{
		std::cout << std::format("{:8}", n);
	}

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-13 월요일 오후 2:45:12
==================================================
//------------------------------------------------------------
// 2023. 3. 13 월56						(2주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 - class
//------------------------------------------------------------
 
#include <iostream>
#include <random>
#include "save.h"

std::default_random_engine dre;
std::uniform_int_distribution<int> uidChar{ 'a', 'z' };
std::uniform_int_distribution<int> uidNum{ 1, 10'000 };

class Dog {
	char c;
	int n;

public:
	Dog (){
		c = uidChar(dre);
		n = uidNum(dre);
	}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog){
		return os << "글자 - " << dog.c << ", 숫자 - " << dog.n;
	}
};

//-------
int main()
//-------
{
	Dog dog;
	std::cout << dog << '\n';

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-13 월요일 오후 2:49:29
==================================================
//------------------------------------------------------------
// 2023. 3. 13 월56						(2주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 - class
//------------------------------------------------------------
 
#include <iostream>
#include <random>
#include <fstream>
#include "save.h"

std::default_random_engine dre;
std::uniform_int_distribution<int> uidChar{ 'a', 'z' };
std::uniform_int_distribution<int> uidNum{ 1, 10'000 };

class Dog {
	char c;
	int n;

public:
	Dog (){
		c = uidChar(dre);
		n = uidNum(dre);
	}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog){
		return os << "글자 - " << dog.c << ", 숫자 - " << dog.n;
	}
};

// [문제] Dog 천 객체를 생성하여 파일 "Dog 천개"에 binary 모드로 저장하라.

//-------
int main()
//-------
{
	std::ofstream dogs{ "Dog 천개", std::ios::binary };

	for (int i = 0; i < 1000; ++i)
	{
		Dog dog;
		dogs << dog << '\n';
	}

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-13 월요일 오후 2:55:43
==================================================
//------------------------------------------------------------
// 2023. 3. 13 월56						(2주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 - class
//------------------------------------------------------------
 
#include <iostream>
#include <random>
#include <fstream>
#include <array>
#include "save.h"

std::default_random_engine dre;
std::uniform_int_distribution<int> uidChar{ 'a', 'z' };
std::uniform_int_distribution<int> uidNum{ 1, 10'000 };

class Dog {
	char c;
	int n;

public:
	Dog (){
		c = uidChar(dre);
		n = uidNum(dre);
	}

	friend std::ostream& operator<<(std::ostream& os, const Dog& dog){
		return os << "글자 - " << dog.c << ", 숫자 - " << dog.n;
	}
};

// [문제] Dog 천 객체를 생성하여 파일 "Dog 천개"에 binary 모드로 저장하라.
// write 함수로 Dog 객체 메모리 그대로 저장하라.


//-------
int main()
//-------
{
	std::ofstream out{ "Dog 천개", std::ios::binary };

	std::array<Dog, 1000> dogs;

	out.write((const char*)&dogs, sizeof(Dog) * 1000);
	
	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-13 월요일 오후 3:10:36
==================================================
//------------------------------------------------------------
// 2023. 3. 13 월56						(2주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처기하기 - class
//------------------------------------------------------------
 
#include <iostream>
#include <random>
#include <fstream>
#include <array>
#include "save.h"

std::default_random_engine dre;
std::uniform_int_distribution<int> uidChar{ 'a', 'z' };
std::uniform_int_distribution<int> uidNum{ 1, 10'000 };

//메모리 padding
class Dog { 
	char c;
	int n;
public:
	friend std::ostream& operator<<(std::ostream& os, const Dog& dog){
		return os << dog.c << ' ' << dog.n;
	}
};

// [문제] Dog 천 객체가 파일 "Dog 천개"에 binary 모드로 메모리 크기대로 저장되어있다.
// 메모리로 읽어와라.
// 화면에도 출력하라

//-------
int main()
//-------
{
	std::array<Dog, 1'000> dogs;

	std::ifstream in{ "Dog 천개", std::ios::binary };

	if (!in) {
		exit(0);
	}

	in.read((char*)&dogs, sizeof dogs);

	for (const Dog& dog : dogs)
		std::cout << dog << '\n';

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-03-13 월요일 오후 3:19:28
==================================================
//------------------------------------------------------------
// 2023. 3. 13 월56						(2주 2일)
//------------------------------------------------------------
// 많은 수의 자료를 처리하기 - class
//------------------------------------------------------------
 
#include <iostream>
#include <fstream>
#include <array>
#include "save.h"


// [문제] "int 천개"에는 int 값 1000개가 binary 모드로 4000바이트가 그대로 기록되어있다.
// 메모리로 읽어와라.
// 값이 100보다 작은 것은 모두 몇 개인가 출력하라.

//-------
int main()
//-------
{
	std::ifstream in{ "int 천개", std::ios::binary };

	if (!in) {
		exit(0);
	}

	std::array<int, 1'000> numbers;
	in.read((char*)&numbers, sizeof numbers);

	// 다음 시간에는 알고리즘으로 해결

	int cnt{};

	for (int num : numbers) {
		if (num < 100) {
			++cnt;
		}
	}

	std::cout << "100보다 작은 숫자 - " << cnt << '\n';

	save("소스.cpp");
}