

==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 1:36:37
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching
// constexpr if
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	set<int> s{1, 2, 3, 4, 5};

	cout << distance(s.begin(), s.end()) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 1:42:45
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching
// constexpr if
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr>
int my_distance(Itr b, Itr e)
{
	int cnt = 0;
	while( b != e)
	{
		++cnt;
		++b;
	}
	return cnt;
}

//-------
int main()
//-------
{
	set<int> s{1, 2, 3, 4, 5};

	cout << my_distance(s.begin(), s.end()) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 1:46:26
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching
// constexpr if
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr>
int my_distance(Itr b, Itr e)
{
	// Iter가 적어도 forward_iterator라면 
	int cnt = 0;
	while( b != e)
	{
		++cnt;
		++b;
	}
	return cnt;
}

//-------
int main()
//-------
{
	set<int> s{1, 2, 3, 4, 5};

	cout << my_distance(s.begin(), s.end()) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 1:52:51
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching
// constexpr if
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr>
int my_distance(Itr b, Itr e)
{
	// 만일 Iter가 random_access_iterator_tag라먄
	if (typeid(Itr::iterator_category).name() == typeid(random_access_iterator_tag).name())
	{
		return e - b;
	}

	// Iter가 적어도 forward_iterator라면 
	int cnt = 0;
	while( b != e)
	{
		++cnt;
		++b;
	}
	return cnt;
}

//-------
int main()
//-------
{
	vector<int> s{1, 2, 3, 4, 5};

	cout << my_distance(s.begin(), s.end()) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 1:56:45
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching
// constexpr if
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr>
int my_distance(Itr b, Itr e)
{
	// 만일 Iter가 random_access_iterator_tag라면
	if(typeid(iterator_traits<Itr>::iterator_category) == typeid(random_access_iterator_tag))
	{
		cout << "랜덤액세스 반복자가 전달되었다" << endl;
		return e - b;
	}

	// Iter가 적어도 forward_iterator라면 
	int cnt = 0;
	while( b != e)
	{
		++cnt;
		++b;
	}
	return cnt;
}

//-------
int main()
//-------
{
	vector<int> s{1, 2, 3, 4, 5};

	cout << my_distance(s.end(), s.begin()) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 2:08:20
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching
// constexpr if
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr>
int my_distance(Itr b, Itr e)
{
	//전달된 타입 T의 여분의 정보를 알아보기 위한 수단 - type_traits

	// 만일 Iter가 random_access_iterator_tag라면
	if(typeid(iterator_traits<Itr>::iterator_category) == typeid(random_access_iterator_tag))
	{
		cout << "랜덤액세스 반복자가 전달되었다" << endl;
		return e - b;
	}

	// Iter가 적어도 forward_iterator라면 
	int cnt = 0;
	while( b != e)
	{
		++cnt;
		++b;
	}
	return cnt;
}

//-------
int main()
//-------
{
	vector<int> s{1, 2, 3, 4, 5};

	cout << my_distance(s.end(), s.begin()) << endl;
	//my_distance(3,4) -> 컴파일도중 오류가 날 것임

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 2:09:48
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching
// constexpr if
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr>
int my_distance(Itr b, Itr e)
{
	//전달된 타입 T의 여분의 정보를 알아보기 위한 수단 - type_traits

	// 만일 Iter가 random_access_iterator_tag라면
	if(typeid(iterator_traits<Itr>::iterator_category) == typeid(random_access_iterator_tag))
	{
		cout << "랜덤액세스 반복자가 전달되었다" << endl;
		return e - b;
	}

	// Iter가 적어도 forward_iterator라면 
	int cnt = 0;
	while( b != e)
	{
		++cnt;
		++b;
	}
	return cnt;
}

//-------
int main()
//-------
{
	
	list<int> l{1, 2, 3, 4, 5};

	cout << distance(l.begin(), l.end()) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 2:10:05
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching
// constexpr if
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr>
int my_distance(Itr b, Itr e)
{
	//전달된 타입 T의 여분의 정보를 알아보기 위한 수단 - type_traits

	// 만일 Iter가 random_access_iterator_tag라면
	if(typeid(iterator_traits<Itr>::iterator_category) == typeid(random_access_iterator_tag))
	{
		cout << "랜덤액세스 반복자가 전달되었다" << endl;
		return e - b;
	}

	// Iter가 적어도 forward_iterator라면 
	int cnt = 0;
	while( b != e)
	{
		++cnt;
		++b;
	}
	return cnt;
}

//-------
int main()
//-------
{
	
	list<int> l{1, 2, 3, 4, 5};

	cout << distance(l.end(), l.begin()) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 2:20:10
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching - C++17 이전에 적합한 함수를 호출하는 기법
// constexpr if
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr>
int my_distance(Itr b, Itr e)
{
	//전달된 타입 T의 여분의 정보를 알아보기 위한 수단 - type_traits

	// 만일 Iter가 random_access_iterator_tag라면
	if(typeid(iterator_traits<Itr>::iterator_category) == typeid(random_access_iterator_tag))
	{
		cout << "랜덤액세스 반복자가 전달되었다" << endl;
		return e - b;
	}

	// Iter가 적어도 forward_iterator라면 
	int cnt = 0;
	while( b != e)
	{
		++cnt;
		++b;
	}
	return cnt;
}

//template<>
//int my_distance<list<int>::iterator>(list<int>::iterator b, list<int>::iterator e)
//{
//	//전달된 타입 T의 여분의 정보를 알아보기 위한 수단 - type_traits
//
//	// 만일 Iter가 random_access_iterator_tag라면
//	if (typeid(iterator_traits<list<int>::iterator>::iterator_category) == typeid(random_access_iterator_tag))
//	{
//		cout << "랜덤액세스 반복자가 전달되었다" << endl;
//		return e - b;	// list<int>::iterator은 뺄셈을 지원하지 않음
//	}
//
//	// Iter가 적어도 forward_iterator라면 
//	int cnt = 0;
//	while (b != e)
//	{
//		++cnt;
//		++b;
//	}
//	return cnt;
//}

//-------
int main()
//-------
{
	
	list<int> l{1, 2, 3, 4, 5};

	//cout << my_distance(l.begin(), l.end()) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 2:21:52
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching - C++17 이전에 적합한 함수를 호출하는 기법
// constexpr if - 소스코드를 선택적으로 확장한다
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr>
int my_distance(Itr b, Itr e)
{
	//전달된 타입 T의 여분의 정보를 알아보기 위한 수단 - type_traits

	// 만일 Iter가 random_access_iterator_tag라면
	if constexpr (typeid(iterator_traits<Itr>::iterator_category) == typeid(random_access_iterator_tag))
	{
		cout << "랜덤액세스 반복자가 전달되었다" << endl;
		return e - b;
	}

	// Iter가 적어도 forward_iterator라면 
	int cnt = 0;
	while( b != e)
	{
		++cnt;
		++b;
	}
	return cnt;
}


//-------
int main()
//-------
{
	list<int> l{1, 2, 3, 4, 5};

	cout << my_distance(l.begin(), l.end()) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 2:22:11
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching - C++17 이전에 적합한 함수를 호출하는 기법
// constexpr if - 소스코드를 선택적으로 확장한다
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr>
int my_distance(Itr b, Itr e)
{
	//전달된 타입 T의 여분의 정보를 알아보기 위한 수단 - type_traits

	// 만일 Iter가 random_access_iterator_tag라면
	if constexpr (typeid(iterator_traits<Itr>::iterator_category) == typeid(random_access_iterator_tag))
	{
		cout << "랜덤액세스 반복자가 전달되었다" << endl;
		return e - b;
	}

	// Iter가 적어도 forward_iterator라면 
	int cnt = 0;
	while( b != e)
	{
		++cnt;
		++b;
	}
	return cnt;
}


//-------
int main()
//-------
{
	list<int> l{1, 2, 3, 4, 5};

	cout << my_distance(l.end(), l.begin()) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 2:22:38
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching - C++17 이전에 적합한 함수를 호출하는 기법
// constexpr if - 소스코드를 선택적으로 확장한다
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class Itr>
int my_distance(Itr b, Itr e)
{
	//전달된 타입 T의 여분의 정보를 알아보기 위한 수단 - type_traits

	// 만일 Iter가 random_access_iterator_tag라면
	if constexpr (typeid(iterator_traits<Itr>::iterator_category) == typeid(random_access_iterator_tag))
	{
		cout << "랜덤액세스 반복자가 전달되었다" << endl;
		return e - b;
	}

	// Iter가 적어도 forward_iterator라면 
	int cnt = 0;
	while( b != e)
	{
		++cnt;
		++b;
	}
	return cnt;
}


//-------
int main()
//-------
{
	vector<int> v{1, 2, 3, 4, 5};

	cout << my_distance(v.end(), v.begin()) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 2:40:58
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching - C++17 이전에 적합한 함수를 호출하는 기법
// constexpr if - 소스코드를 선택적으로 확장한다
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class T>
T add(T a, T b)
{
	return a + b;
}

//-------
int main()
//-------
{
	cout << add(3, 4) << endl;
	cout << add(3.3, 4.4) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 2:41:14
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching - C++17 이전에 적합한 함수를 호출하는 기법
// constexpr if - 소스코드를 선택적으로 확장한다
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class T>
T add(T a, T b)
{
	return a + b;
}

//-------
int main()
//-------
{
	cout << add(3, 4) << endl;
	cout << add(3.3, 4.4) << endl;
	cout << add(String("123"), String{ "456" });
	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 2:50:36
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching - C++17 이전에 적합한 함수를 호출하는 기법
// constexpr if - 소스코드를 선택적으로 확장한다
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//전달되는 타입에 제약을 걸자
//integral같은 것을 concept이라고 한다
template<integral T>
T add(T a, T b)
{
	return a + b;
}

class Dog {
	friend ostream& operator<<(ostream& os, const Dog& dog) {
		return os;
	}
};

//-------
int main()
//-------
{
	//cout << add(3, 4) << endl;
	//cout << add(3.3, 4.4) << endl;
	//cout << add(String("123"), String{ "456" }) << endl;
	//cout << add(Dog{}, Dog{}) << endl;


	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 2:52:13
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// distance를 구현한다 - iterator operation
// tag dispatching - C++17 이전에 적합한 함수를 호출하는 기법
// constexpr if - 소스코드를 선택적으로 확장한다
// concept
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//전달되는 타입에 제약을 걸자
//integral같은 것을 concept이라고 한다
//어느 부분이 잘못되었는지를 명확하게 해준다.
template<integral T>
T add(T a, T b)
{
	return a + b;
}


//-------
int main()
//-------
{
	cout << add(3, 4) << endl;
	//cout << add(3.3, 4.4) << endl;
	//cout << add(String("123"), String{ "456" }) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 3:04:46
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 함수형 프로그램밍
// Range - 함수형 프로그래밍
// Module
// Coroutine
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class T>
concept 정수와플로트만 = integral<T> or floating_point<T>;

template<정수와플로트만 T>
T add(T a, T b)
{
	return a + b;
}

//-------
int main()
//-------
{
	cout << add(3, 4) << endl;
	cout << add(3.3, 4.4) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 3:06:41
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 함수형 프로그램밍
// Range - 함수형 프로그래밍
// Module
// Coroutine
//-----------------------------------------------------------------
#include <iostream>
#include <set>
#include <list>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

template<class T>
concept addable = integral<T> or floating_point<T>;


addable auto add(addable auto a, addable auto b)
{
	return a + b;
}

//-------
int main()
//-------
{
	cout << add(3, 4) << endl;
	cout << add(3.3, 4.4) << endl;

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 3:17:28
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 함수형 프로그램밍
// Range - 함수형 프로그래밍
// Module
// Coroutine
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <random>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution uidNum{ 1,100 };
uniform_int_distribution<int> uidC{'A', 'Z'};

struct Dog
{
	int num = uidNum(dre);
	char c = uidC(dre);
};

//-------
int main()
//-------
{
	vector<Dog> dogs(100);
	
	for ( auto& [숫자, 글자] : dogs)
	{
		cout << 숫자 << " - " << 글자 << endl;
	}

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 3:17:40
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 함수형 프로그램밍
// Range - 함수형 프로그래밍
// Module
// Coroutine
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <random>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution uidNum{ 1,100 };
uniform_int_distribution<int> uidC{'A', 'Z'};

struct Dog
{
	int num = uidNum(dre);
	char c = uidC(dre);
};

//-------
int main()
//-------
{
	vector<Dog> dogs(100);
	
	for ( auto& [숫자, 글자] : dogs)
	{
		cout << 글자 << " - " << 숫자 << endl;
	}

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-01 목요일 오후 3:18:20
==================================================
//------------------------------------------------------------
// 2023. 6. 1, 목56                        (14주 1일)
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 함수형 프로그램밍
// Range - 함수형 프로그래밍
// Module
// Coroutine
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <random>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

default_random_engine dre;
uniform_int_distribution uidNum{ 1,100 };
uniform_int_distribution<int> uidC{'A', 'Z'};

struct Dog
{
	int num = uidNum(dre);
	char c = uidC(dre);
};

//-------
int main()
//-------
{
	vector<Dog> dogs(100);
	
	ranges::sort(dogs, {}, &Dog::num);

	for ( auto& [숫자, 글자] : dogs)
	{
		cout << 글자 << " - " << 숫자 << endl;
	}

	save("소스.cpp");
}
