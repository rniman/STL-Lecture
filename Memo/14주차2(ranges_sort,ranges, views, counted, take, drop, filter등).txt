
==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:07:26
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
//  lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	vector<int> v{3, 8, 6, 1, 2, 9, 4, 10, 7, 5};
	
	//sort(v.begin(), v.end());
	ranges::sort(v);	// 암시적으로 v를 v.begin과 v.end로 바꾼다.

	//for (int n : [v.begin(), v.end()) )
	for (int n : v)
		cout << n << ' ';
	cout << endl;
	
	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:09:22
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
//  lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	vector<int> v{3, 8, 6, 1, 2, 9, 4, 10, 7, 5};
	
	ranges::sort(v);
	
	for (int n : views::counted(&v[1], 5))
		cout << n << ' ';
	cout << endl;
	
	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:10:05
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
//  lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	vector<int> v{3, 8, 6, 1, 2, 9, 4, 10, 7, 5};
	
	ranges::sort(views::counted(&v[0], 10));
	
	for (int n : views::counted(&v[1], 5))
		cout << n << ' ';
	cout << endl;
	
	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:11:50
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
//  lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//  -- [start, size)
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	vector<int> v{3, 8, 6, 1, 2, 9, 4, 10, 7, 5};
	
	ranges::sort(views::counted(v.begin() + 1, 5));
	
	for (int n : v)
		cout << n << ' ';
	cout << endl;
	
	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:14:53
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
//  lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//  -- [start, size)
//  -- [start, predicate)
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	vector<int> v{3, 8, 6, 1, 2, 9, 4, 10, 7, 5};
	
	ranges::sort(v);
	
	for (int n : views::take_while(v, [](int n){return n < 5;})) //v중에서 5보다 작은 동안
		cout << n << ' ';
	cout << endl;
	
	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:16:12
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
//  lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//  -- [start, size)
//  -- [start, predicate)
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	vector<int> v{3, 8, 6, 1, 2, 9, 4, 10, 7, 5};
	
	ranges::sort(views::take_while(v, [](int n) {return n < 9; }));
	
	for (int n : v)
		cout << n << ' ';
	cout << endl;
	
	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:18:27
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
//  lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//  -- [start, size)
//  -- [start, predicate)
//  -- [start..)  끝이없는 시퀀스
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{	
	for (int n : views::iota(1000, 1005)) 
	//for (int n : views::iota(1000)) 
		cout << n << ' ';
	cout << endl;
	
	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:36:19
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
// - lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//  -- [start, size)
//  -- [start, predicate)
//  -- [start..)  끝이없는 시퀀스
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{	
	//{1, 2, 3, 4, 5, 6, 7, 8, 9, 10} -> 이니셜라이즈 리스트
	for (int n : {1, 2, 3, 4, 5, 6, 7, 8, 9, 10})
		cout << n << ' ';
	cout << endl;
	
	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:37:47
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
// - lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//  -- [start, size)
//  -- [start, predicate)
//  -- [start..)  끝이없는 시퀀스
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{	
	vector<int> v{1, 2, 3, 4, 5};
	
	auto 범위 = views::counted(v.begin(), 3);
	cout << 범위.size() << endl;

	save("소스.cpp");
}

==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:47:37
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
// - lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//  -- [start, size)
//  -- [start, predicate)
//  -- [start..)  끝이없는 시퀀스
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

bool isPrime2(int n) {
	for (int i = 2; i <= sqrt(n); i++) {//2~n의 제곱근까지
		if (n % i == 0) {//i가 n의 약수라면 소수가 아니므로 false return
			return false;
		}
	}
	//2 ~ n-1까지 약수가 없다면 소수이므로, true return
	return true;
}

//-------
int main()
//-------
{
	save("소스.cpp");

	// 소수(prime num, 2 3 5 7 9 11 13)를 영원히 출력하라

	for (int i = 2;; ++i)
	{
		if (isPrime2(i))
			cout << i << ' ';
	}

}


==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:53:35
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
// - lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//  -- [start, size)
//  -- [start, predicate)
//  -- [start..)  끝이없는 시퀀스
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

bool isPrime2(int n) {
	for (int i = 2; i <= sqrt(n); i++) {//2~n의 제곱근까지
		if (n % i == 0) {//i가 n의 약수라면 소수가 아니므로 false return
			return false;
		}
	}
	//2 ~ n-1까지 약수가 없다면 소수이므로, true return
	return true;
}

//-------
int main()
//-------
{
	save("소스.cpp");

	// 소수(prime num, 2 3 5 7 9 11 13)를 영원히 출력하라
	// 100만 이상의 수 중에서 100개만 출력하라


	for (int n : views::iota(2)
				| views::drop_while([](int i) {return i < 100'0000; })
				| views::filter(isPrime2)
				| views::take(100)
		)
		cout << n << ' ';
	cout << endl;

}


==================================================
소스.cpp , 저장시간: 2023-06-05 월요일 오후 2:56:01
==================================================
//------------------------------------------------------------
// 2023. 6. 5, 월56                        (14주 2일)
// 6/6일 업로드할 동영상 - 총정리 실습
//------------------------------------------------------------------
// C++20 - 4 major change
// Concept - 템플릿에 전달되는 인자(자료형)가 원하는 의미(semantic)를 
//			 만족하는지 컴파일 타임에 검사(소스코드 확장 전);
// Range - composable / less error-prone --> lazy evaluation(지연 평가)
// - lightWeight object -> ex) string_view와 같이 가벼운 정보를 담은 경량화한 객체
//  -- [begin, end)
//  -- [start, size)
//  -- [start, predicate)
//  -- [start..)  끝이없는 시퀀스
//-----------------------------------------------------------------
#include <iostream>
#include <ranges>
#include <algorithm>
#include <vector>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

bool isPrime2(int n) {
	for (int i = 2; i <= sqrt(n); i++) {//2~n의 제곱근까지
		if (n % i == 0) {//i가 n의 약수라면 소수가 아니므로 false return
			return false;
		}
	}
	//2 ~ n-1까지 약수가 없다면 소수이므로, true return
	return true;
}

//-------
int main()
//-------
{
	save("소스.cpp");

	// 소수(prime num, 2 3 5 7 9 11 13)를 영원히 출력하라
	// 100만 이상의 수 중에서 100개만 뒤에서부터 출력하라


	for (int n : views::iota(2)
			   | views::drop_while([](int i) {return i < 100'0000; })
			   | views::filter(isPrime2)
			   | views::take(100)
			   | views::reverse
		)
		cout << n << ' ';
	cout << endl;

}
