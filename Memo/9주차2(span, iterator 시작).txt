==================================================
소스.cpp , 저장시간: 2023-05-01 월요일 오후 1:46:07
==================================================
//------------------------------------------------------------
// 2023. 5. 1 월56								(9주 2일)
//------------------------------------------------------------
// span, mdspan (C++23)
//------------------------------------------------------------
#include <iostream>
#include <numeric>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

void print(int[]); // -> []는 *로 collapse 된다.

//-------
int main()
//-------
{
	int a[10]{ 1,2,3,4,5,6,7,8,9,10 };

	print(a);	//화면에 a의 모든 값을 출력하라

	save("소스.cpp");
}

void print(int nums[])
{

}

==================================================
소스.cpp , 저장시간: 2023-05-01 월요일 오후 1:52:21
==================================================
//------------------------------------------------------------
// 2023. 5. 1 월56								(9주 2일)
//------------------------------------------------------------
// span, mdspan (C++23)
//------------------------------------------------------------
#include <iostream>
#include <span>
#include <vector>
#include <list>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

void print(span<int> );

//-------
int main()
//-------
{
	//int a[]; //불가능 -> 컴파일러는 개수를 알아야한다.
	
	int a[10]{ 1,2,3,4,5,6,7,8,9,10 };
	print(a); //화면에 a의 모든 값을 출력하라

	vector<int> v{ 10, 333 };
	print(v);

	// 컴파일오류
	//list<int> v( 10, 333 );
	//print(v);

	save("소스.cpp");
}

void print(span<int> cm)
{
	for (int n : cm)
	{
		cout << n << ' ';
	}
	cout << endl;
}

==================================================
소스.cpp , 저장시간: 2023-05-01 월요일 오후 1:57:52
==================================================
//------------------------------------------------------------
// 2023. 5. 1 월56								(9주 2일)
//------------------------------------------------------------
// span, mdspan (C++23)
//------------------------------------------------------------
#include <iostream>
#include <span>
#include <vector>
#include <list>
#include <string>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

void print(span<char> );

//-------
int main()
//-------
{

	//String s{ "Hello, hello" };
	//print(s);

	string s{ "Hello, hello" };
	print(s);

	save("소스.cpp");
}

void print(span<char> cm)
{
	for (char n : cm)
	{
		cout << n << ' ';
	}
	cout << endl;
}

==================================================
소스.cpp , 저장시간: 2023-05-01 월요일 오후 2:51:11
==================================================
//------------------------------------------------------------
// 2023. 5. 1 월56								(9주 2일)
//------------------------------------------------------------
// 반복자(iterator)
// - 포인터를 추상화(=일반화) 한 것이 반복자다
// - Iterators are a generalization of pointers
// 6가지 종류(category)로 나뉜다.
// - 입력/출력/전진(전방향)/양방향(전후진)/랜덤억세스/컨티구어스 반복자
//------------------------------------------------------------
#include <iostream>
#include <iterator>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	// 반복자는 클래스 객체이다. 할 수 있는 동작을 알아본다.

	// 출력반복자 어뎁터
	ostream_iterator<char> p{ cout };	// 모니터 화면을 돌아다니는 포인터

	*p = 'a';
	*p = 'b';
	*p = 'c';

	*p = 'a';
	++p;
	*p = 'b';
	++p;
	*p = 'c';


	save("소스.cpp");
}
==================================================
소스.cpp , 저장시간: 2023-05-01 월요일 오후 2:58:47
==================================================
//------------------------------------------------------------
// 2023. 5. 1 월56								(9주 2일)
//------------------------------------------------------------
// 반복자(iterator)
// - 포인터를 추상화(=일반화) 한 것이 반복자다
// - Iterators are a generalization of pointers
// 6가지 종류(category)로 나뉜다.
// - 입력/출력/전진(전방향)/양방향(전후진)/랜덤억세스/컨티구어스 반복자
// 기초동작: *, ++, =
//------------------------------------------------------------
#include <iostream>
#include <iterator>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

//-------
int main()
//-------
{
	// 반복자는 클래스 객체이다. 할 수 있는 동작을 알아본다.

	// 출력반복자 어뎁터
	ostream_iterator<char> p{ cout };	// 모니터 화면을 돌아다니는 포인터

	//--p; 불가능

	p = 'a';
	p = 'b';
	p = 'c';

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-01 월요일 오후 3:14:52
==================================================
//------------------------------------------------------------
// 2023. 5. 1 월56								(9주 2일)
//------------------------------------------------------------
// 반복자(iterator)
// - 포인터를 추상화(=일반화) 한 것이 반복자다
// - Iterators are a generalization of pointers
// 6가지 종류(category)로 나뉜다.
// - 입력/출력/전진(전방향)/양방향(전후진)/랜덤억세스/컨티구어스 반복자
// 기초동작: *, ++, =
//------------------------------------------------------------
#include <iostream>
#include <vector>
#include <iterator>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

// [문제] 함수 f() 반복자를 인자로 받아 어떤 종류의 반복자인지 화면 출력한다.

template <class 반복자>
void f(반복자)
{
	cout << "iter를 받았다" << endl;
}

//-------
int main()
//-------
{
	vector<int> v;
	ostream_iterator<char> p{ cout };
	
	f(123);
	f(v.begin());
	f(p);

	save("소스.cpp");
}


==================================================
소스.cpp , 저장시간: 2023-05-01 월요일 오후 3:15:26
==================================================
//------------------------------------------------------------
// 2023. 5. 1 월56								(9주 2일)
//------------------------------------------------------------
// 반복자(iterator)
// - 포인터를 추상화(=일반화) 한 것이 반복자다
// - Iterators are a generalization of pointers
// 6가지 종류(category)로 나뉜다.
// - 입력/출력/전진(전방향)/양방향(전후진)/랜덤억세스/컨티구어스 반복자
// 기초동작: *, ++, =
//------------------------------------------------------------
#include <iostream>
#include <vector>
#include <iterator>
#include "save.h"
#include "String.h"

using namespace std;
extern bool 관찰;

// [문제] 함수 f() 반복자를 인자로 받아 어떤 종류의 반복자인지 화면 출력한다.

template <class iter>
void f(iter)
{
	cout << typeid(iter).name() << endl;
}

//-------
int main()
//-------
{
	vector<int> v;
	ostream_iterator<char> p{ cout };
	
	f(123);
	f(v.begin());
	f(p);

	save("소스.cpp");
}
